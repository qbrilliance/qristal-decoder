variables:
  CI_IMAGE: registry.gitlab.com/qbau/software-and-apps/ci-dockerfiles/ubuntu_x86-22.04:all_dep_clang-1
  # CORE_REF specifies the reference to copy artifacts from e.g. "refs/merge-requests/209/head"
  # default is "main"
  CORE_REF: main

stages:
  - build
  - test

# Switch between merge request and branch pipelines.
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.install_core:
  before_script:
    - whoami
    - echo $PWD
    - ls *
    - export ARTEFACTS_DIR=$PWD/../core
    # The state of the runner is persistent outside the working dir, do delete any previous core dirs.
    - rm -rf $ARTEFACTS_DIR $QB_DIR/core
    - mv core_artefacts $ARTEFACTS_DIR
    - cmake --install $ARTEFACTS_DIR/build

ci-build-triggered-from-upstream:
  stage: build
  image: $CI_IMAGE
  extends: .install_core
  tags: 
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $UPSTREAM_REF
      artifacts: true
  script:
    - echo Using core branch $UPSTREAM_REF
    - cmake -B build . -Dqbcore_DIR=${QB_DIR}/core
    - cmake --build build
    - rm -rf $WORK_DIR/core $QB_DIR/core
  artifacts:
    when: always
    paths:
      - build/CITests_decoder
      - build/cmake_install.cmake
      - build/lib*

ci-cpp-tests-triggered-from-upstream:
  stage: test
  extends: .install_core
  image: $CI_IMAGE
  tags: 
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
  needs:
    - "ci-build-triggered-from-upstream"
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $UPSTREAM_REF
      artifacts: true
  script:
    - echo Using core branch $UPSTREAM_REF
    - cmake --install build
    - timeout 1m ./build/CITests_decoder --test --gtest_output='xml:decoder_gtests.xml' || true #TODO fix test and remove timeout
    - rm -rf $WORK_DIR/core $QB_DIR/core
      #artifacts:
      #  when: always
      #  reports:
      #    junit: decoder_gtests.xml

ci-build-triggered-locally:
  stage: build
  image: $CI_IMAGE
  extends: .install_core
  tags: 
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  needs:
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $CORE_REF
      artifacts: true
  script:
    - echo Using core branch $CORE_REF
    - cmake -B build . -Dqbcore_DIR=${QB_DIR}/core
    - cmake --build build
    - rm -rf $WORK_DIR/core $QB_DIR/core
  artifacts:
    when: always
    paths:
      - build/CITests_decoder
      - build/cmake_install.cmake
      - build/lib*

ci-cpp-tests-triggered-locally:
  stage: test
  extends: .install_core
  image: $CI_IMAGE
  tags: 
    - x86Docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "pipeline"
  needs:
    - "ci-build-triggered-locally"
    - project: qbau/software-and-apps/core
      job: ci-build
      ref: $CORE_REF
      artifacts: true
  script:
    - echo Using core branch $CORE_REF
    - cmake --install build
    - timeout 1m ./build/CITests_decoder --test --gtest_output='xml:decoder_gtests.xml' || true #TODO fix test and remove timeout
    - rm -rf $WORK_DIR/core $QB_DIR/core
      #artifacts:
      #  when: always
      #  reports:
      #    junit: decoder_gtests.xml
